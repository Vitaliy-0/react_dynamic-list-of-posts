{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comment.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onSelect","className","map","post","userId","title","id","onClick","type","BASE_URL","getPostComments","postId","a","fetch","then","response","json","data","filter","item","getUserPosts","getPostDetails","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","newComment","onSubmit","event","value","onChange","target","placeholder","rows","cols","PostDetails","details","setDetails","comments","setComments","isVisible","setVisible","useEffect","fetchPostDetails","postDetails","console","error","fetchPostComments","commentsFromServer","Promise","all","remove","commentId","method","deleteComment","currentComments","comment","length","current","preventDefault","existComments","Loader","App","initialPosts","userPosts","setUserPosts","isLoading","setLoading","selectPost","loadPosts","postsFromServer","log","loadPostsByUser","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ab93e5a.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  onSelect: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, onSelect }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            {selectedPostId === post.id ? (\n              <button\n                onClick={() => onSelect(0)}\n                type=\"button\"\n                className=\"PostsList__button button\"\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                onClick={() => onSelect(post.id)}\n                type=\"button\"\n                className=\"PostsList__button button\"\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = async (postId: number) => {\n  return fetch(`${BASE_URL}/comments`)\n    .then(response => response.json())\n    .then(data => data.filter(\n      (item: Comment) => item.postId === postId,\n    ));\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const postComment = (comment: Comment) => {\n  return fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import { Post } from '../types/Post';\nimport { BASE_URL } from './api';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUserPosts = (userId: number) => {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  addComment: (\n    event: React.FormEvent<HTMLFormElement>,\n    comment: Comment\n  ) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const newComment: Comment = {\n    id: 0,\n    name,\n    email,\n    body,\n    postId: 0,\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        clearForm();\n        addComment(event, newComment);\n      }}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n          rows={5}\n          cols={23}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments, deleteComment } from '../../api/comment';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const initialComment: Comment[] = [];\n  const [details, setDetails] = useState(null);\n  const [comments, setComments] = useState(initialComment);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        const postDetails = await getPostDetails(postId);\n\n        setDetails(postDetails);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching posts');\n      }\n    };\n\n    const fetchPostComments = async () => {\n      try {\n        const commentsFromServer = await getPostComments(postId);\n\n        setComments(commentsFromServer);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching post comments');\n      }\n    };\n\n    Promise.all([fetchPostDetails(), fetchPostComments()]);\n  }, [postId]);\n\n  const toggleVisibility = () => {\n    setVisible(current => !current);\n  };\n\n  const remove = (commentId: number) => {\n    deleteComment(commentId);\n    setComments(\n      currentComments => currentComments.filter(\n        comment => commentId !== comment.id,\n      ),\n    );\n  };\n\n  const addComment = (\n    event: React.FormEvent<HTMLFormElement>,\n    comment: Comment,\n  ) => {\n    event.preventDefault();\n\n    setComments(existComments => [...existComments, comment]);\n  };\n\n  if (details && postId !== 0) {\n    const { title } = details;\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{title}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {comments.length ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleVisibility}\n            >\n              {isVisible ? 'Hide' : 'Show'}\n            </button>\n          ) : (\n            <p>No comments...</p>\n          )}\n\n          {isVisible && (\n            <ul className=\"PostDetails__list\">\n              {comments.length > 0 && comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => remove(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.name}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm addComment={addComment} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return (\n    <p>No user selected</p>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const initialPosts: Post[] = [];\n  const [userPosts, setUserPosts] = useState(initialPosts);\n  const [isLoading, setLoading] = useState(false);\n  const [selectedPostId, selectPost] = useState(0);\n\n  const loadPosts = async () => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getAllPosts();\n\n      setUserPosts(postsFromServer);\n      setLoading(false);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('Fetch userPosts: ', error);\n    }\n  };\n\n  const loadPostsByUser = async (userId: number) => {\n    setLoading(true);\n    setUserPosts(initialPosts);\n\n    try {\n      const postsFromServer = await getUserPosts(userId);\n\n      setUserPosts(postsFromServer);\n      setLoading(false);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('Error', error);\n    }\n  };\n\n  const onSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (value === '0') {\n      loadPosts();\n    } else {\n      loadPostsByUser(Number(value));\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={onSelectChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {userPosts.length > 0 && ( // if posts.length - you will see '0' at the page\n            <PostsList\n              posts={userPosts}\n              selectedPostId={selectedPostId}\n              onSelect={(postId) => selectPost(postId)}\n            />\n          )}\n          {!isLoading && !userPosts.length && (\n            <p className=\"posts--empty\">No todos</p>\n          )}\n          {isLoading && (\n            <Loader />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}