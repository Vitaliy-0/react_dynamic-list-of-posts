{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comment.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onSelect","className","map","id","title","userId","onClick","type","BASE_URL","getPostComments","postId","a","fetch","then","response","json","data","filter","item","getUserPosts","getPostDetails","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","commentValidation","isValid","newComment","Math","round","random","inputHandler","event","n","target","value","onSubmit","preventDefault","e","b","trim","isCommentValid","onChange","placeholder","rows","cols","PostDetails","details","setDetails","comments","setComments","isVisible","setVisible","useEffect","fetchPostDetails","postDetails","console","error","fetchPostComments","commentsFromServer","Promise","all","remove","commentId","method","deleteComment","currentComments","comment","length","current","JSON","stringify","headers","postComment","existComments","Loader","App","initialPosts","userPosts","setUserPosts","isLoading","setLoading","selectPost","loadPosts","postsFromServer","log","loadPostsByUser","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5531561.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  onSelect: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, onSelect }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(({ id, title, userId }) => (\n        <li key={id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${userId}]: `}</b>\n            {title}\n          </div>\n\n          {selectedPostId === id ? (\n            <button\n              onClick={() => onSelect(0)}\n              type=\"button\"\n              className=\"PostsList__button button\"\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              onClick={() => onSelect(id)}\n              type=\"button\"\n              className=\"PostsList__button button\"\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = async (postId: number) => {\n  return fetch(`${BASE_URL}/comments`)\n    .then(response => response.json())\n    .then(data => data.filter(\n      (item: Comment) => item.postId === postId,\n    ));\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const postComment = (comment: Comment) => {\n  return fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import { Post } from '../types/Post';\nimport { BASE_URL } from './api';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUserPosts = (userId: number) => {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  addComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [commentValidation, isValid] = useState(true);\n\n  const newComment: Comment = {\n    id: Math.round(Math.random() * 1000),\n    name,\n    email,\n    body,\n    postId,\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const isCommentValid = ({ name: n, email: e, body: b }: Comment) => (\n    n.trim() && e.trim() && b.trim()\n  );\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isCommentValid(newComment)) {\n      isValid(true);\n      clearForm();\n      addComment(newComment);\n    } else {\n      isValid(false);\n    }\n  };\n\n  const inputHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name: n } = event.target;\n    const { value } = event.target;\n\n    isValid(true);\n\n    switch (n) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          onChange={inputHandler}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          onChange={inputHandler}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          onChange={inputHandler}\n          rows={5}\n          cols={23}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {!commentValidation && (\n        <p className=\"NewCommentForm--invalid\">Comment is invalid</p>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments, deleteComment, postComment } from '../../api/comment';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const initialComment: Comment[] = [];\n  const [details, setDetails] = useState(null);\n  const [comments, setComments] = useState(initialComment);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        const postDetails = await getPostDetails(postId);\n\n        setDetails(postDetails);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching posts');\n      }\n    };\n\n    const fetchPostComments = async () => {\n      try {\n        const commentsFromServer = await getPostComments(postId);\n\n        setComments(commentsFromServer);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching post comments');\n      }\n    };\n\n    Promise.all([fetchPostDetails(), fetchPostComments()]);\n  }, [postId]);\n\n  const toggleVisibility = () => {\n    setVisible(current => !current);\n  };\n\n  const remove = (commentId: number) => {\n    deleteComment(commentId);\n    setComments(\n      currentComments => currentComments.filter(\n        comment => commentId !== comment.id,\n      ),\n    );\n  };\n\n  const addComment = (\n    comment: Comment,\n  ) => {\n    postComment(comment);\n    setComments(existComments => [...existComments, comment]);\n  };\n\n  if (details && postId !== 0) {\n    const { title } = details;\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{title}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {comments.length ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleVisibility}\n            >\n              {isVisible ? 'Hide' : 'Show'}\n            </button>\n          ) : (\n            <p>No comments...</p>\n          )}\n\n          {isVisible && (\n            <ul className=\"PostDetails__list\">\n              {comments.length > 0 && comments.map(({ id, name }) => (\n                <li className=\"PostDetails__list-item\" key={id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => remove(id)}\n                  >\n                    X\n                  </button>\n                  <p>{name}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm postId={postId} addComment={addComment} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return (\n    <p>No user selected</p>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const initialPosts: Post[] = [];\n  const [userPosts, setUserPosts] = useState(initialPosts);\n  const [isLoading, setLoading] = useState(false);\n  const [selectedPostId, selectPost] = useState(0);\n\n  const loadPosts = async () => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getAllPosts();\n\n      setUserPosts(postsFromServer);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      // eslint-disable-next-line no-console\n      console.log('Fetch userPosts: ', error);\n    }\n  };\n\n  const loadPostsByUser = async (userId: number) => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getUserPosts(userId);\n\n      setUserPosts(postsFromServer);\n      setLoading(false);\n    } catch (error) {\n      setUserPosts(initialPosts);\n      // eslint-disable-next-line no-console\n      console.log('Error', error);\n    }\n  };\n\n  const onSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (value === '0') {\n      loadPosts();\n    } else {\n      loadPostsByUser(Number(value));\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={onSelectChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {userPosts.length > 0 && ( // if posts.length - you will see '0' at the page\n            <PostsList\n              posts={userPosts}\n              selectedPostId={selectedPostId}\n              onSelect={(postId) => selectPost(postId)}\n            />\n          )}\n          {!isLoading && !userPosts.length && (\n            <p className=\"posts--empty\">No todos</p>\n          )}\n          {isLoading && (\n            <Loader />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}